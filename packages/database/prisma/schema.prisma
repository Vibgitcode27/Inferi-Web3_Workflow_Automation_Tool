datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Feri {
  id        String    @id @default(uuid())
  triggerId String
  trigger   Trigger?
  action    Action[]
  FeriRuns  FeriRun[]
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model FeriRun {
  id         String       @id @default(uuid())
  feriId     String
  status     String
  metadata   Json
  feri       Feri?        @relation(fields: [feriId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feriOutbox FeriOutbox[]
  updatedAt  DateTime[]
  createdAt  DateTime     @default(now())
}

model FeriOutbox {
  id        String   @id @default(uuid())
  metadata  Json
  feriRunId String
  status    String
  FeriRun   FeriRun  @relation(fields: [feriRunId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Trigger {
  id        String           @id @default(uuid())
  triggerId String
  feriId    String           @unique
  type      AvailableTrigger @relation(fields: [triggerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feri      Feri             @relation(fields: [feriId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt DateTime         @updatedAt
  createdAt DateTime         @default(now())
}

model Action {
  id        String           @id @default(uuid())
  actionId  String
  feriId    String           @unique
  type      AvailableActions @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feri      Feri             @relation(fields: [feriId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt DateTime         @updatedAt
  createdAt DateTime         @default(now())
}

model AvailableActions {
  id     String   @id @default(uuid())
  name   String
  Action Action[]
}

model AvailableTrigger {
  id      String    @id @default(uuid())
  name    String
  Trigger Trigger[]
}
